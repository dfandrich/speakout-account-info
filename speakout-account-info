#!/bin/bash
# Retrieve balance information for a Canadian SpeakOut cellular account
#
# Copyright Â© 2022 Daniel Fandrich.
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

set -e

readonly VERSION=2022.1
if [[ "$1" == "--help" ]]; then
    echo "Usage: $0 [--help] [--quiet] [--alwaysmail] [--lowmail]"
    echo "ver. $VERSION"
    exit 0
fi

trap 'echo Error encountered in "$STAGE" 1>&2' EXIT

# https://www.speakout7eleven.ca/ serves an incomplete certificate bundle which
# does not include intermediate certificates, causing certificate validation to
# fail. Browsers cache intermediate certificates, so as long as they have it
# cached, they don't produce an error, but curl does not do that. Hard-code the
# bundle here instead so the certificate can be validated. This was downloaded
# from https://sectigostore.com/page/sectigo-ca-bundle/ as the "Sectigo RSA
# Bundle for an Organization Validated (OV) SSL Certificate"
readonly CACERTS='
-----BEGIN CERTIFICATE-----
MIIENjCCAx6gAwIBAgIBATANBgkqhkiG9w0BAQUFADBvMQswCQYDVQQGEwJTRTEU
MBIGA1UEChMLQWRkVHJ1c3QgQUIxJjAkBgNVBAsTHUFkZFRydXN0IEV4dGVybmFs
IFRUUCBOZXR3b3JrMSIwIAYDVQQDExlBZGRUcnVzdCBFeHRlcm5hbCBDQSBSb290
MB4XDTAwMDUzMDEwNDgzOFoXDTIwMDUzMDEwNDgzOFowbzELMAkGA1UEBhMCU0Ux
FDASBgNVBAoTC0FkZFRydXN0IEFCMSYwJAYDVQQLEx1BZGRUcnVzdCBFeHRlcm5h
bCBUVFAgTmV0d29yazEiMCAGA1UEAxMZQWRkVHJ1c3QgRXh0ZXJuYWwgQ0EgUm9v
dDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALf3GjPm8gAELTngTlvt
H7xsD821+iO2zt6bETOXpClMfZOfvUq8k+0DGuOPz+VtUFrWlymUWoCwSXrbLpX9
uMq/NzgtHj6RQa1wVsfwTz/oMp50ysiQVOnGXw94nZpAPA6sYapeFI+eh6FqUNzX
mk6vBbOmcZSccbNQYArHE504B4YCqOmoaSYYkKtMsE8jqzpPhNjfzp/haW+710LX
a0Tkx63ubUFfclpxCDezeWWkWaCUN/cALw3CknLa0Dhy2xSoRcRdKn23tNbE7qzN
E0S3ySvdQwAl+mG5aWpYIxG3pzOPVnVZ9c0p10a3CitlttNCbxWyuHv77+ldU9U0
WicCAwEAAaOB3DCB2TAdBgNVHQ4EFgQUrb2YejS0Jvf6xCZU7wO94CTLVBowCwYD
VR0PBAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wgZkGA1UdIwSBkTCBjoAUrb2YejS0
Jvf6xCZU7wO94CTLVBqhc6RxMG8xCzAJBgNVBAYTAlNFMRQwEgYDVQQKEwtBZGRU
cnVzdCBBQjEmMCQGA1UECxMdQWRkVHJ1c3QgRXh0ZXJuYWwgVFRQIE5ldHdvcmsx
IjAgBgNVBAMTGUFkZFRydXN0IEV4dGVybmFsIENBIFJvb3SCAQEwDQYJKoZIhvcN
AQEFBQADggEBALCb4IUlwtYj4g+WBpKdQZic2YR5gdkeWxQHIzZlj7DYd7usQWxH
YINRsPkyPef89iYTx4AWpb9a/IfPeHmJIZriTAcKhjW88t5RxNKWt9x+Tu5w/Rw5
6wwCURQtjr0W4MHfRnXnJK3s9EK0hZNwEGe6nQY1ShjTK3rMUUKhemPR5ruhxSvC
Nr4TDea9Y355e6cJDUCrat2PisP29owaQgVR1EX1n6diIWgVIEM8med8vSTYqZEX
c4g/VhsxOBi0cQ+azcgOno4uG+GMmIPLHzHxREzGBHNJdmAPx/i9F4BrLunMTA5a
mnkPIAou1Z5jJh5VkpTYghdae9C8x49OhgQ=
-----END CERTIFICATE-----

-----BEGIN CERTIFICATE-----
MIIFdzCCBF+gAwIBAgIQE+oocFv07O0MNmMJgGFDNjANBgkqhkiG9w0BAQwFADBv
MQswCQYDVQQGEwJTRTEUMBIGA1UEChMLQWRkVHJ1c3QgQUIxJjAkBgNVBAsTHUFk
ZFRydXN0IEV4dGVybmFsIFRUUCBOZXR3b3JrMSIwIAYDVQQDExlBZGRUcnVzdCBF
eHRlcm5hbCBDQSBSb290MB4XDTAwMDUzMDEwNDgzOFoXDTIwMDUzMDEwNDgzOFow
gYgxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpOZXcgSmVyc2V5MRQwEgYDVQQHEwtK
ZXJzZXkgQ2l0eTEeMBwGA1UEChMVVGhlIFVTRVJUUlVTVCBOZXR3b3JrMS4wLAYD
VQQDEyVVU0VSVHJ1c3QgUlNBIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIICIjAN
BgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAgBJlFzYOw9sIs9CsVw127c0n00yt
UINh4qogTQktZAnczomfzD2p7PbPwdzx07HWezcoEStH2jnGvDoZtF+mvX2do2NC
tnbyqTsrkfjib9DsFiCQCT7i6HTJGLSR1GJk23+jBvGIGGqQIjy8/hPwhxR79uQf
jtTkUcYRZ0YIUcuGFFQ/vDP+fmyc/xadGL1RjjWmp2bIcmfbIWax1Jt4A8BQOujM
8Ny8nkz+rwWWNR9XWrf/zvk9tyy29lTdyOcSOk2uTIq3XJq0tyA9yn8iNK5+O2hm
AUTnAU5GU5szYPeUvlM3kHND8zLDU+/bqv50TmnHa4xgk97Exwzf4TKuzJM7UXiV
Z4vuPVb+DNBpDxsP8yUmazNt925H+nND5X4OpWaxKXwyhGNVicQNwZNUMBkTrNN9
N6frXTpsNVzbQdcS2qlJC9/YgIoJk2KOtWbPJYjNhLixP6Q5D9kCnusSTJV882sF
qV4Wg8y4Z+LoE53MW4LTTLPtW//e5XOsIzstAL81VXQJSdhJWBp/kjbmUZIO8yZ9
HE0XvMnsQybQv0FfQKlERPSZ51eHnlAfV1SoPv10Yy+xUGUJ5lhCLkMaTLTwJUdZ
+gQek9QmRkpQgbLevni3/GcV4clXhB4PY9bpYrrWX1Uu6lzGKAgEJTm4Diup8kyX
HAc/DVL17e8vgg8CAwEAAaOB9DCB8TAfBgNVHSMEGDAWgBStvZh6NLQm9/rEJlTv
A73gJMtUGjAdBgNVHQ4EFgQUU3m/WqorSs9UgOHYm8Cd8rIDZsswDgYDVR0PAQH/
BAQDAgGGMA8GA1UdEwEB/wQFMAMBAf8wEQYDVR0gBAowCDAGBgRVHSAAMEQGA1Ud
HwQ9MDswOaA3oDWGM2h0dHA6Ly9jcmwudXNlcnRydXN0LmNvbS9BZGRUcnVzdEV4
dGVybmFsQ0FSb290LmNybDA1BggrBgEFBQcBAQQpMCcwJQYIKwYBBQUHMAGGGWh0
dHA6Ly9vY3NwLnVzZXJ0cnVzdC5jb20wDQYJKoZIhvcNAQEMBQADggEBAJNl9jeD
lQ9ew4IcH9Z35zyKwKoJ8OkLJvHgwmp1ocd5yblSYMgpEg7wrQPWCcR23+WmgZWn
RtqCV6mVksW2jwMibDN3wXsyF24HzloUQToFJBv2FAY7qCUkDrvMKnXduXBBP3zQ
YzYhBx9G/2CkkeFnvN4ffhkUyWNnkepnB2u0j4vAbkN9w6GAbLIevFOFfdyQoaS8
Le9Gclc1Bb+7RrtubTeZtv8jkpHGbkD4jylW6l/VXxRTrPBPYer3IsynVgviuDQf
Jtl7GQVoP7o81DgGotPmjw7jtHFtQELFhLRAlSv0ZaBIefYdgWOWnU914Ph85I6p
0fKtirOMxyHNwu8=
-----END CERTIFICATE-----

-----BEGIN CERTIFICATE-----
MIIGGTCCBAGgAwIBAgIQE31TnKp8MamkM3AZaIR6jTANBgkqhkiG9w0BAQwFADCB
iDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCk5ldyBKZXJzZXkxFDASBgNVBAcTC0pl
cnNleSBDaXR5MR4wHAYDVQQKExVUaGUgVVNFUlRSVVNUIE5ldHdvcmsxLjAsBgNV
BAMTJVVTRVJUcnVzdCBSU0EgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMTgx
MTAyMDAwMDAwWhcNMzAxMjMxMjM1OTU5WjCBlTELMAkGA1UEBhMCR0IxGzAZBgNV
BAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4GA1UEBxMHU2FsZm9yZDEYMBYGA1UE
ChMPU2VjdGlnbyBMaW1pdGVkMT0wOwYDVQQDEzRTZWN0aWdvIFJTQSBPcmdhbml6
YXRpb24gVmFsaWRhdGlvbiBTZWN1cmUgU2VydmVyIENBMIIBIjANBgkqhkiG9w0B
AQEFAAOCAQ8AMIIBCgKCAQEAnJMCRkVKUkiS/FeN+S3qU76zLNXYqKXsW2kDwB0Q
9lkz3v4HSKjojHpnSvH1jcM3ZtAykffEnQRgxLVK4oOLp64m1F06XvjRFnG7ir1x
on3IzqJgJLBSoDpFUd54k2xiYPHkVpy3O/c8Vdjf1XoxfDV/ElFw4Sy+BKzL+k/h
fGVqwECn2XylY4QZ4ffK76q06Fha2ZnjJt+OErK43DOyNtoUHZZYQkBuCyKFHFEi
rsTIBkVtkuZntxkj5Ng2a4XQf8dS48+wdQHgibSov4o2TqPgbOuEQc6lL0giE5dQ
YkUeCaXMn2xXcEAG2yDoG9bzk4unMp63RBUJ16/9fAEc2wIDAQABo4IBbjCCAWow
HwYDVR0jBBgwFoAUU3m/WqorSs9UgOHYm8Cd8rIDZsswHQYDVR0OBBYEFBfZ1iUn
Z/kxwklD2TA2RIxsqU/rMA4GA1UdDwEB/wQEAwIBhjASBgNVHRMBAf8ECDAGAQH/
AgEAMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAbBgNVHSAEFDASMAYG
BFUdIAAwCAYGZ4EMAQICMFAGA1UdHwRJMEcwRaBDoEGGP2h0dHA6Ly9jcmwudXNl
cnRydXN0LmNvbS9VU0VSVHJ1c3RSU0FDZXJ0aWZpY2F0aW9uQXV0aG9yaXR5LmNy
bDB2BggrBgEFBQcBAQRqMGgwPwYIKwYBBQUHMAKGM2h0dHA6Ly9jcnQudXNlcnRy
dXN0LmNvbS9VU0VSVHJ1c3RSU0FBZGRUcnVzdENBLmNydDAlBggrBgEFBQcwAYYZ
aHR0cDovL29jc3AudXNlcnRydXN0LmNvbTANBgkqhkiG9w0BAQwFAAOCAgEAThNA
lsnD5m5bwOO69Bfhrgkfyb/LDCUW8nNTs3Yat6tIBtbNAHwgRUNFbBZaGxNh10m6
pAKkrOjOzi3JKnSj3N6uq9BoNviRrzwB93fVC8+Xq+uH5xWo+jBaYXEgscBDxLmP
bYox6xU2JPti1Qucj+lmveZhUZeTth2HvbC1bP6mESkGYTQxMD0gJ3NR0N6Fg9N3
OSBGltqnxloWJ4Wyz04PToxcvr44APhL+XJ71PJ616IphdAEutNCLFGIUi7RPSRn
R+xVzBv0yjTqJsHe3cQhifa6ezIejpZehEU4z4CqN2mLYBd0FUiRnG3wTqN3yhsc
SPr5z0noX0+FCuKPkBurcEya67emP7SsXaRfz+bYipaQ908mgWB2XQ8kd5GzKjGf
FlqyXYwcKapInI5v03hAcNt37N3j0VcFcC3mSZiIBYRiBXBWdoY5TtMibx3+bfEO
s2LEPMvAhblhHrrhFYBZlAyuBbuMf1a+HNJav5fyakywxnB2sJCNwQs2uRHY1ihc
6k/+JLcYCpsM0MF8XPtpvcyiTcaQvKZN8rG61ppnW5YCUtCC+cQKXA0o4D/I+pWV
idWkvklsQLI+qGu41SWyxP7x09fn1txDAXYw+zuLXfdKiXyaNb78yvBXAfCNP6CH
MntHWpdLgtJmwsQt6j8k9Kf5qLnjatkYYaA7jBU=
-----END CERTIFICATE-----
'

# set variables to default before reading the rc file
account=
password=
recipient=
warnlimit=0
alwaysmail=
lowmail=
quiet=
mailer="sendmail -oi -t"

# STAGE is displayed automatically on error to help explain the problem
STAGE='reading speakoutinforc file'
source "$HOME/.config/speakoutinforc"

STAGE='missing account'
test -z "$account" && exit 1

# Add a new password with:
#  secret-tool store --label="SpeakOut Account" speakout-account "$account"
if [[ -z "$password" ]]; then
    STAGE="retrieving password with secret-tool for '$account'"
    password="$(secret-tool lookup speakout-account "$account")"
fi
STAGE='missing password'
test -z "$password" && exit 1

if [[ "$1" == "--quiet" ]]; then
    quiet=yes
    shift
fi

if [[ "$1" == "--alwaysmail" ]]; then
    alwaysmail=yes
    shift
fi

if [[ "$1" == "--lowmail" ]]; then
    lowmail=yes
    shift
fi

if [[ -n "$1" ]]; then
    STAGE='unknown argument'
    exit 1
fi

STAGE='preparation'

readonly UA='User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0'

readonly COOKIES="$(mktemp)"
readonly FORMFILE="$(mktemp)"
readonly CONTENTFILE="$(mktemp --suffix=.html)"
trap 'test "$?" -ne 0 && echo Error encountered in "$STAGE" 1>&2; rm -f "$COOKIES" "$FORMFILE" "$CONTENTFILE"' EXIT

STAGE='retrieving login data'
# Get a session cookie and redirect to the session-specific login URL
curl --no-progress-meter --compressed --cacert <(echo "$CACERTS") --fail --retry 3 --max-time 90 --cookie-jar "$COOKIES" --location --proto-redir -all,https --max-redirs 5 -o "$CONTENTFILE" -H "$UA" https://www.speakout7eleven.ca/customer/account/

STAGE='processing login data'
# Convert to xhtml for manipulation
tidy -utf8 -asxml -numeric  -f /dev/null --output-file "$CONTENTFILE" "$CONTENTFILE" || test "$?" == 1

STAGE='processing login data (is site under maintenance?)'
# Get the session-specific POST URL. A failure here will happen during web site maintenance.
readonly POSTURL="$(xmlstarlet sel -N x=http://www.w3.org/1999/xhtml -t -v '//x:form[@id="login-form"]/@action' "$CONTENTFILE")"
test -n "$POSTURL"  # Site is probably under maintenance if this is empty
readonly FORMKEY="$(xmlstarlet sel -N x=http://www.w3.org/1999/xhtml -t -v '//x:form[@id="login-form"]/x:input[@name="form_key"]/@value' "$CONTENTFILE")"

# Put passwords into a file so they aren't visible to ps
cat >"$FORMFILE" <<EOF
-d "form_key=$FORMKEY"
-d "login[username]=$account"
-d "login[password]=$password"
-d "send=Login"
--cookie "form_key=$FORMKEY"
EOF

STAGE='login and download status'
# Log in & download status page
curl --no-progress-meter --compressed --cacert <(echo "$CACERTS") --fail --retry 3 --max-time 90 --cookie-jar "$COOKIES" --location --proto-redir -all,https --max-redirs 5 -o "$CONTENTFILE" -H "$UA" --config "$FORMFILE" --referer "$POSTURL" "$POSTURL"

STAGE='processing status information (wrong password?)'
# Convert to xhtml for manipulation
tidy -utf8 -asxml -numeric  -f /dev/null --output-file "$CONTENTFILE" "$CONTENTFILE" || test "$?" == 1

BALANCE="$(xmlstarlet sel -N x=http://www.w3.org/1999/xhtml -t -v '//x:div[@class="act-bal"]/x:h2' "$CONTENTFILE")"
# Strip off the dollar sign
BALANCE="${BALANCE#$}"
# $BALANCE will hold "Account Expired" if the account is expired. We could do something
# special with this, but it's clear enough in the e-mail already what the problem is
# without special-casing it.
readonly EXPIRY="$(xmlstarlet sel -N x=http://www.w3.org/1999/xhtml -t -v '//x:span[@id="remaining_date"]' "$CONTENTFILE")"
readonly PHONENUM="$(xmlstarlet sel -N x=http://www.w3.org/1999/xhtml -t -v '//x:option[@name="sel_speakout_number"][@selected="selected"]/@value' "$CONTENTFILE")"
# Format phone number more nicely
readonly NICEPHONENUM="$(sed -Ee 's/^(...)(...)(.*)$/(\1) \2-\3/' <<< "$PHONENUM")"

if awk "BEGIN {exit !($BALANCE < $warnlimit)}"; then
    readonly LIMITEXCEEDED=yes
    readonly BG=pink
else
    readonly LIMITEXCEEDED=
    readonly BG=greenyellow
fi

# Write out status info
test -z "$quiet" && echo "$PHONENUM $BALANCE $EXPIRY"

cat >"$CONTENTFILE" <<EOF
<!doctype html><html lang="en"><body>
<h1>SpeakOut cellular account status report for $NICEPHONENUM</h1>
<p>
<span style='font-weight: bold; font-size: x-large; background-color: $BG; margin: 1em; padding: 0.3em; border-radius: 0.3em; border-style: solid;'>Balance: \$$BALANCE</span>
<p>
As of $(date), the balance remaining on the cellular number $NICEPHONENUM is
<span style='font-size: medium'>\$$BALANCE</span> which expires $EXPIRY.
EOF

if [[ -n "$LIMITEXCEEDED" ]]; then
    cat >>"$CONTENTFILE" <<EOF
        <span style='color: pink; font-weight: bold;'>This is below the warning threshold of \$$warnlimit!</span>
        <p>
        Add more money to your account now by
        <a href="https://www.speakout7eleven.ca/userinfo/activation/topup/an/$PHONENUM/">choosing an amount here</a>.
EOF
fi

cat >>"$CONTENTFILE" <<EOF
        <p>
        <a href="https://www.speakout7eleven.ca/customer/account/">Log in to your account here</a>.
</body></html>
EOF

if [[ -n "$recipient" && ( -n "$alwaysmail" || ( -n "$lowmail" && -n "$LIMITEXCEEDED" ) ) ]]; then
    STAGE='sending e-mail'
    (
    echo "To: $recipient"
    echo "Subject: SpeakOut cellular account status report for $(date +'%B %d, %Y')"
    echo "Content-Type: text/html; charset=UTF-8"
    echo "X-Mailer: speakout-account-info $VERSION"
    echo ""
    cat "$CONTENTFILE"
    ) | $mailer
    test -z "$quiet" && echo "Sent account status e-mail to '$recipient'" 1>&2
fi

STAGE='complete'

# Temporary files are automatically deleted in the trap
