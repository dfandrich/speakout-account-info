#!/bin/bash
# Retrieve balance information for a Canadian SpeakOut cellular account
#
# Copyright Â© 2022 Daniel Fandrich.
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

set -e

if [[ "$1" == "--help" ]]; then
    echo "Usage: $0 [--help] [--quiet] [--alwaysmail] [--nomail]"
    exit 0
fi

trap 'echo Error encountered in "$STAGE" 1>&2' EXIT

# set variables to default before reading the rc file
account=
password=
recipient=
warnlimit=0
alwaysmail=
quiet=
mailer="sendmail -oi -t"

# STAGE is displayed automatically on error to help explain the problem
STAGE='reading speakoutinforc file'
source "$HOME/.config/speakoutinforc"

STAGE='missing account'
test -z "$account" && exit 1

# Add a new password with:
#  secret-tool store --label="SpeakOut Account" speakout-account "$account"
if [[ -z "$password" ]]; then
    STAGE="retrieving password with secret-tool for '$account'"
    password="$(secret-tool lookup speakout-account "$account")"
fi
STAGE='missing password'
test -z "$password" && exit 1

if [[ "$1" == "--quiet" ]]; then
    quiet=yes
    shift
fi

if [[ "$1" == "--alwaysmail" ]]; then
    alwaysmail=yes
    shift
fi

if [[ "$1" == "--nomail" ]]; then
    recipient=
    shift
fi

if [[ -n "$1" ]]; then
    STAGE='unknown argument'
    exit 1
fi

STAGE='preparation'

readonly UA='User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0'

readonly COOKIES="$(mktemp)"
readonly FORMFILE="$(mktemp)"
readonly CONTENTFILE="$(mktemp --suffix=.html)"
readonly CERTFILE="$(mktemp)"
trap 'test "$?" -ne 0 && echo Error encountered in "$STAGE" 1>&2; rm -f "$COOKIES" "$FORMFILE" "$CONTENTFILE" "$CERTFILE"' EXIT

# The web site has an incomplete certificate chain because it is missing this
# intermediate certificate
cat >"$CERTFILE" <<EOF
# DigiCertTLSRSASHA2562020CA1.crt
-----BEGIN CERTIFICATE-----
MIIE6jCCA9KgAwIBAgIQCjUI1VwpKwF9+K1lwA/35DANBgkqhkiG9w0BAQsFADBh
MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3
d3cuZGlnaWNlcnQuY29tMSAwHgYDVQQDExdEaWdpQ2VydCBHbG9iYWwgUm9vdCBD
QTAeFw0yMDA5MjQwMDAwMDBaFw0zMDA5MjMyMzU5NTlaME8xCzAJBgNVBAYTAlVT
MRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxKTAnBgNVBAMTIERpZ2lDZXJ0IFRMUyBS
U0EgU0hBMjU2IDIwMjAgQ0ExMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
AQEAwUuzZUdwvN1PWNvsnO3DZuUfMRNUrUpmRh8sCuxkB+Uu3Ny5CiDt3+PE0J6a
qXodgojlEVbbHp9YwlHnLDQNLtKS4VbL8Xlfs7uHyiUDe5pSQWYQYE9XE0nw6Ddn
g9/n00tnTCJRpt8OmRDtV1F0JuJ9x8piLhMbfyOIJVNvwTRYAIuE//i+p1hJInuW
raKImxW8oHzf6VGo1bDtN+I2tIJLYrVJmuzHZ9bjPvXj1hJeRPG/cUJ9WIQDgLGB
Afr5yjK7tI4nhyfFK3TUqNaX3sNk+crOU6JWvHgXjkkDKa77SU+kFbnO8lwZV21r
eacroicgE7XQPUDTITAHk+qZ9QIDAQABo4IBrjCCAaowHQYDVR0OBBYEFLdrouqo
qoSMeeq02g+YssWVdrn0MB8GA1UdIwQYMBaAFAPeUDVW0Uy7ZvCj4hsbw5eyPdFV
MA4GA1UdDwEB/wQEAwIBhjAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIw
EgYDVR0TAQH/BAgwBgEB/wIBADB2BggrBgEFBQcBAQRqMGgwJAYIKwYBBQUHMAGG
GGh0dHA6Ly9vY3NwLmRpZ2ljZXJ0LmNvbTBABggrBgEFBQcwAoY0aHR0cDovL2Nh
Y2VydHMuZGlnaWNlcnQuY29tL0RpZ2lDZXJ0R2xvYmFsUm9vdENBLmNydDB7BgNV
HR8EdDByMDegNaAzhjFodHRwOi8vY3JsMy5kaWdpY2VydC5jb20vRGlnaUNlcnRH
bG9iYWxSb290Q0EuY3JsMDegNaAzhjFodHRwOi8vY3JsNC5kaWdpY2VydC5jb20v
RGlnaUNlcnRHbG9iYWxSb290Q0EuY3JsMDAGA1UdIAQpMCcwBwYFZ4EMAQEwCAYG
Z4EMAQIBMAgGBmeBDAECAjAIBgZngQwBAgMwDQYJKoZIhvcNAQELBQADggEBAHer
t3onPa679n/gWlbJhKrKW3EX3SJH/E6f7tDBpATho+vFScH90cnfjK+URSxGKqNj
OSD5nkoklEHIqdninFQFBstcHL4AGw+oWv8Zu2XHFq8hVt1hBcnpj5h232sb0HIM
ULkwKXq/YFkQZhM6LawVEWwtIwwCPgU7/uWhnOKK24fXSuhe50gG66sSmvKvhMNb
g0qZgYOrAKHKCjxMoiWJKiKnpPMzTFuMLhoClw+dj20tlQj7T9rxkTgl4ZxuYRiH
as6xuwAwapu3r9rxxZf+ingkquqTgLozZXq8oXfpf2kUCwA/d5KxTVtzhwoT0JzI
8ks5T1KESaZMkE4f97Q=
-----END CERTIFICATE-----
EOF

STAGE='retrieving login data'
# Get a session cookie and redirect to the session-specific login URL
curl --no-progress-meter --compressed --cacert "$CERTFILE" --fail --retry 3 --max-time 90 --cookie-jar "$COOKIES" --location --proto-redir -all,https --max-redirs 5 -o "$CONTENTFILE" -H "$UA" https://www.speakout7eleven.ca/customer/account/

STAGE='processing login data'
# Convert to xhtml for manipulation
tidy -utf8 -asxml -numeric  -f /dev/null --output-file "$CONTENTFILE" "$CONTENTFILE" || test "$?" == 1

STAGE='processing login data (is site under maintenance?)'
# Get the session-specific POST URL. A failure here will happen during web site maintenance.
readonly POSTURL="$(xmlstarlet sel -N x=http://www.w3.org/1999/xhtml -t -v '//x:form[@id="login-form"]/@action' "$CONTENTFILE")"
test -n "$POSTURL"  # Site is probably under maintenance if this is empty
readonly FORMKEY="$(xmlstarlet sel -N x=http://www.w3.org/1999/xhtml -t -v '//x:form[@id="login-form"]/x:input[@name="form_key"]/@value' "$CONTENTFILE")"

# Put passwords into a file so they aren't visible to ps
cat >"$FORMFILE" <<EOF
-d "form_key=$FORMKEY"
-d "login[username]=$account"
-d "login[password]=$password"
-d "send=Login"
--cookie "form_key=$FORMKEY"
EOF

STAGE='login and download status'
# Log in & download status page
curl --no-progress-meter --compressed --cacert "$CERTFILE" --fail --retry 3 --max-time 90 --cookie-jar "$COOKIES" --location --proto-redir -all,https --max-redirs 5 -o "$CONTENTFILE" -H "$UA" --config "$FORMFILE" --referer "$POSTURL" "$POSTURL"

STAGE='processing status information (wrong password?)'
# Convert to xhtml for manipulation
tidy -utf8 -asxml -numeric  -f /dev/null --output-file "$CONTENTFILE" "$CONTENTFILE" || test "$?" == 1

BALANCE="$(xmlstarlet sel -N x=http://www.w3.org/1999/xhtml -t -v '//x:div[@class="act-bal"]/x:h2' "$CONTENTFILE")"
# Strip off the dollar sign
BALANCE="${BALANCE#$}"
readonly EXPIRY="$(xmlstarlet sel -N x=http://www.w3.org/1999/xhtml -t -v '//x:span[@id="remaining_date"]' "$CONTENTFILE")"
readonly PHONENUM="$(xmlstarlet sel -N x=http://www.w3.org/1999/xhtml -t -v '//x:option[@name="sel_speakout_number"][@selected="selected"]/@value' "$CONTENTFILE")"
# Format phone number more nicely
readonly NICEPHONENUM="$(sed -Ee 's/^(...)(...)(.*)$/(\1) \2-\3/' <<< "$PHONENUM")"

if awk "BEGIN {exit !($BALANCE < $warnlimit)}"; then
    readonly LIMITEXCEEDED=yes
    readonly BG=pink
else
    readonly LIMITEXCEEDED=
    readonly BG=greenyellow
fi

# Write out status info
test -z "$quiet" && echo "$PHONENUM $BALANCE $EXPIRY"

cat >"$CONTENTFILE" <<EOF
<!doctype html><html lang="en"><body>
<h1>SpeakOut cellular account status report for $NICEPHONENUM</h1>
<p>
<span style='font-weight: bold; font-size: x-large; background-color: $BG; margin: 1em; padding: 0.3em; border-radius: 0.3em; border-style: solid;'>Balance: \$$BALANCE</span>
<p>
As of $(date), the balance remaining on the cellular number $NICEPHONENUM is
<span style='font-size: medium'>\$$BALANCE</span> which expires $EXPIRY.
EOF

if [[ -n "$LIMITEXCEEDED" ]]; then
    cat >>"$CONTENTFILE" <<EOF
        <span style='color: pink; font-weight: bold;'>This is below the warning threshold of \$$warnlimit!</span>
        <p>
        Add more money to your account now by
        <a href="https://www.speakout7eleven.ca/userinfo/activation/topup/an/$PHONENUM/">choosing an amount here</a>.
EOF
fi

cat >>"$CONTENTFILE" <<EOF
        <p>
        <a href="https://www.speakout7eleven.ca/customer/account/">Log in to your account here</a>.
</body></html>
EOF

if [[ ( -n "$LIMITEXCEEDED" || -n "$alwaysmail" ) && -n "$recipient" ]]; then
    STAGE='sending e-mail'
    (
    echo "To: $recipient"
    echo "Subject: SpeakOut cellular account status report for $(date +'%B %d, %Y')"
    echo "Content-Type: text/html; charset=UTF-8"
    echo "X-Mailer: speakout-account-info"
    echo ""
    cat "$CONTENTFILE"
    ) | $mailer
    test -z "$quiet" && echo "Sent account status e-mail to '$recipient'" 1>&2
fi

STAGE='complete'

# Temporary files are automatically deleted in the trap
