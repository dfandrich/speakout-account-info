#!/bin/bash
# Retrieve balance information for a Canadian SpeakOut cellular account
#
# Copyright © 2022–2023 Daniel Fandrich.
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

set -e

readonly VERSION=2023.2-dev
if [[ "$1" == "--help" ]]; then
    echo "Usage: $0 [--help] [--quiet] [--alwaysmail] [--lowmail]"
    echo "ver. $VERSION"
    exit 0
fi

# Create this before reading in the config file so it can be used there
readonly curldir="$(mktemp -d)"

trap 'rmdir "$curldir"; echo Error encountered in "$STAGE" 1>&2' EXIT

# set variables to default before reading the rc file
account=
password=
recipient=
warnlimit=0
expirydays=7
alwaysmail=
lowmail=
quiet=
mailer="sendmail -oi -t"
curl=curl_ff109

# STAGE is displayed automatically on error to help explain the problem
STAGE='reading speakoutinforc file'
source "$HOME/.config/speakoutinforc"

STAGE='missing account'
test -z "$account" && exit 1

# Add a new password with:
#  secret-tool store --label="SpeakOut Account" speakout-account "$account"
if [[ -z "$password" ]]; then
    STAGE="retrieving password with secret-tool for '$account'"
    password="$(secret-tool lookup speakout-account "$account")"
fi
STAGE='missing password'
test -z "$password" && exit 1

if [[ "$1" == "--quiet" ]]; then
    quiet=yes
    shift
fi

if [[ "$1" == "--alwaysmail" ]]; then
    alwaysmail=yes
    shift
fi

if [[ "$1" == "--lowmail" ]]; then
    lowmail=yes
    shift
fi

if [[ -n "$1" ]]; then
    STAGE='unknown argument'
    exit 1
fi

STAGE='preparation'

readonly COOKIES="$(mktemp -p "$curldir")"
readonly FORMFILE="$(mktemp -p "$curldir")"
readonly CONTENTFILE="$(mktemp -p "$curldir" --suffix=.html)"
trap 'test "$?" -ne 0 && echo Error encountered in "$STAGE" 1>&2; rm -f "$COOKIES" "$FORMFILE" "$CONTENTFILE"; rmdir "$curldir"' EXIT

STAGE='retrieving login data'
# Get a session cookie and redirect to the session-specific login URL
$curl --no-progress-meter --compressed --fail --retry 3 --max-time 90 --cookie-jar "$COOKIES" --location --proto-redir -all,https --max-redirs 5 https://www.speakout7eleven.ca/customer/account/ > "$CONTENTFILE"

STAGE='processing login data'
# Convert to xhtml for manipulation
tidy -utf8 -asxml -numeric  -f /dev/null --output-file "$CONTENTFILE" "$CONTENTFILE" || test "$?" == 1

STAGE='processing login data (is site under maintenance?)'
# Get the session-specific POST URL. A failure here will happen during web site maintenance.
readonly POSTURL="$(xmlstarlet sel -N x=http://www.w3.org/1999/xhtml -t -v '//x:form[@id="login-form"]/@action' "$CONTENTFILE")"
test -n "$POSTURL"  # Site is probably under maintenance if this is empty
readonly FORMKEY="$(xmlstarlet sel -N x=http://www.w3.org/1999/xhtml -t -v '//x:form[@id="login-form"]/x:input[@name="form_key"]/@value' "$CONTENTFILE")"

# Put passwords into a file so they aren't visible to ps
cat >"$FORMFILE" <<EOF
-d "form_key=$FORMKEY"
-d "login[username]=$account"
-d "login[password]=$password"
-d "send=Login"
--cookie "form_key=$FORMKEY"
EOF

STAGE='login and download status'
# Log in & download status page
$curl --no-progress-meter --compressed --fail --retry 3 --max-time 90 --cookie-jar "$COOKIES" --location --proto-redir -all,https --max-redirs 5 --config "$FORMFILE" --referer "$POSTURL" "$POSTURL" > "$CONTENTFILE"

STAGE='processing status information (wrong password?)'
# Convert to xhtml for manipulation
tidy -utf8 -asxml -numeric  -f /dev/null --output-file "$CONTENTFILE" "$CONTENTFILE" || test "$?" == 1

BALANCE="$(xmlstarlet sel -N x=http://www.w3.org/1999/xhtml -t -v '//x:div[@class="act-bal"]/x:h2' "$CONTENTFILE")"
# Strip off the dollar sign
BALANCE="${BALANCE#$}"
# $BALANCE will hold "Account Expired" if the account is expired. We could do something
# special with this, but it's clear enough in the e-mail already what the problem is
# without special-casing it.
readonly EXPIRY="$(xmlstarlet sel -N x=http://www.w3.org/1999/xhtml -t -v '//x:span[@id="remaining_date"]' "$CONTENTFILE")"
readonly PHONENUM="$(xmlstarlet sel -N x=http://www.w3.org/1999/xhtml -t -v '//x:option[@name="sel_speakout_number"][@selected="selected"]/@value' "$CONTENTFILE")"
# Format phone number more nicely
readonly NICEPHONENUM="$(sed -Ee 's/^(...)(...)(.*)$/(\1) \2-\3/' <<< "$PHONENUM")"

if awk "BEGIN {exit !($BALANCE < $warnlimit)}"; then
    readonly LIMITEXCEEDED=yes
    readonly BG=pink
else
    readonly LIMITEXCEEDED=
    readonly BG=greenyellow
fi

# Write out status info
test -z "$quiet" && echo "$PHONENUM $BALANCE $EXPIRY"

cat >"$CONTENTFILE" <<EOF
<!doctype html><html lang="en"><body>
<h1>SpeakOut cellular account status report for $NICEPHONENUM</h1>
<p>
<span style='font-weight: bold; font-size: x-large; background-color: $BG; margin: 1em; padding: 0.3em; border-radius: 0.3em; border-style: solid;'>Balance: \$$BALANCE</span>
<p>
As of $(date), the balance remaining on the cellular number $NICEPHONENUM is
<span style='font-size: medium'>\$$BALANCE</span> which expires $EXPIRY.
EOF

if awk -F/ -v EXPIRYDAYS="$expirydays" '{exit mktime($3 " " $1 " " $2 " 00 00 00") - systime() >= EXPIRYDAYS * 24*3600}' <<< "$EXPIRY"; then
    readonly TIMEEXCEEDED=yes
    cat >>"$CONTENTFILE" <<EOF
        <span style='color: pink; font-weight: bold;'>This is expiring within $expirydays days!</span>
EOF
else
    readonly TIMEEXCEEDED=
fi

if [[ -n "$LIMITEXCEEDED" ]]; then
    cat >>"$CONTENTFILE" <<EOF
        <span style='color: pink; font-weight: bold;'>This is below the warning threshold of \$$warnlimit!</span>
EOF
fi

if [[ -n "$LIMITEXCEEDED" || -n "$TIMEEXCEEDED" ]]; then
    cat >>"$CONTENTFILE" <<EOF
        <p>
        Add more money to your account now by
        <a href="https://www.speakout7eleven.ca/userinfo/activation/topup/an/$PHONENUM/">choosing an amount here</a>.
EOF
fi

cat >>"$CONTENTFILE" <<EOF
        <p>
        <a href="https://www.speakout7eleven.ca/customer/account/">Log in to your account here</a>.
</body></html>
EOF

if [[ -n "$recipient" && ( -n "$alwaysmail" || ( -n "$lowmail" && ( -n "$LIMITEXCEEDED" || -n "$TIMEEXCEEDED" ) ) ) ]]; then
    STAGE='sending e-mail'
    (
    echo "To: $recipient"
    echo "Subject: SpeakOut cellular account status report for $(date +'%B %d, %Y')"
    echo "Content-Type: text/html; charset=UTF-8"
    echo "X-Mailer: speakout-account-info $VERSION"
    echo ""
    cat "$CONTENTFILE"
    ) | $mailer
    test -z "$quiet" && echo "Sent account status e-mail to '$recipient'" 1>&2
fi

STAGE='complete'

# Temporary files are automatically deleted in the trap
